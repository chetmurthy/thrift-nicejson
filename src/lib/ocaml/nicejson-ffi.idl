(
 (stanzas
 (
(CPP PROLOGUE
   "
#include <stdio.h>
#include <string>
#include <unistd.h>
#include <ostream>
#include <iostream>
#include <vector>

#include \"nicejson_intf.h\"
#include \"cppffi.h\"
")
  (TYPEDEF
  ((mltype (EXP int))
   (cpptype (ID size_t))
   (name size_t)))


   (FOREIGN
    ((ID std::string))
    nicejson_foo
    (((PRIM INT) n))
     "_res0 = ocaml::nicejson::foo(n); ")

   (FOREIGN
    ((TYCON "std::tuple" ((ID std::string) (PRIM INT))))
    nicejson_bar
    (((ID std::string) s) ((PRIM INT) n))
     "_res0 = ocaml::nicejson::bar(s, n); ")

   (FOREIGN
    ()
    prepend_typelib_directory
    (((ID std::string) s))
     "ocaml::nicejson::prepend_typelib_directory(s); ")

   (FOREIGN
    ((ID std::string))
    install_typelib
    (((ID std::string) key) ((ID std::string) serialized))
     "_res0 = ocaml::nicejson::install_typelib(key, serialized); ")

   (FOREIGN
    ((ID std::string))
    require_typelib
    (((ID std::string) key))
     "_res0 = ocaml::nicejson::require_typelib(key); ")

   (FOREIGN
    ((ID std::string) (ID std::string))
    json_from_binary
    (((ID std::string) key) ((ID std::string) type) ((ID std::string) serialized))
     "_res0 = ocaml::nicejson::json_from_binary(key, type, serialized, &_res1); ")

   (FOREIGN
    ((ID std::string) (ID std::string))
    binary_from_json
    (((ID std::string) key) ((ID std::string) type) ((ID std::string) jss))
     "_res0 = ocaml::nicejson::binary_from_json(key, type, jss, &_res1); ")

   (FOREIGN
    ((ID std::string))
    service_struct_name_args
    (((ID std::string) key) ((ID std::string) service) ((ID std::string) operation))
     "_res0 = ocaml::nicejson::service_struct_name_args(key, service, operation); ")

   (FOREIGN
    ((ID std::string))
    service_struct_name_result
    (((ID std::string) key) ((ID std::string) service) ((ID std::string) operation))
     "_res0 = ocaml::nicejson::service_struct_name_result(key, service, operation); ")

   )
  )
 )
